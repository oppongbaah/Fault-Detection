function noFault = my_ANFIS(AVG_A,VAR_A,RMS_A,AVG_D,VAR_D,RMS_D,phaseName)
%%
clc; close all;
%%
%% LOADING DATA
TrainData = xlsread('data.xlsx');
TestData = xlsread('data.xlsx');
CheckInput = [AVG_A VAR_A RMS_A AVG_D VAR_D RMS_D];
%%
%% EXTRACTING THE INPUTS AND OUTPUTS FROM THE DATA
TrainInput = TrainData(1:70, 1:6);
TrainTarget = TrainData(1:70, 7);
TestInput = TestData(71:99, 1:6);
TestTarget = TestData(71:99, 7);
%%
%% SELECTION OF FIS GENEERATION METHOD
Option{1}='Grid Partitioning (genfis1)';
Option{2}='Subtractive Clustering (genfis2)';
Option{3}='FCM (genfis3)';
% Save the option chosen from the dialog box in the ANSWER variable
ANSWER = questdlg('Select FIS Generation Approach:',...
                'Select GENFIS',...
                Option{1},Option{2},Option{3},...
                Option{3});
pause(0.01);
%%
%% FIS GENERATION
switch ANSWER
    case Option{1}
        Prompt={'Number of MFs','Input MF Type:','Output MF Type:'};
        Title = 'Enter genfis1 parameters';
        DefaultValues = {'5', 'gaussmf', 'linear'};
        PARAMS = inputdlg(Prompt, Title, 1, DefaultValues);
        pause(0.01);
        %
        fisOptions = genfisOptions('GridPartition');
        fisOptions.NumMembershipFunctions = str2double(PARAMS{1});
        fisOptions.InputMembershipFunctionType = PARAMS{2};
        fisOptions.OutputMembershipFunctionType = PARAMS{3};
        %       
        fis = genfis(TrainInput, TrainTarget, fisOptions);
    case Option{2}
        Prompt={'Influence Radius:', 'Data Scale', 'Squash Factor', ...
            'Accept Ratio', 'Reject Ratio' };
        Title='Enter genfis2 parameters';
        DefaultValues={'0.2', 'auto', '1.25', '0.5', '0.15', };
        PARAMS=inputdlg(Prompt, Title, 1, DefaultValues);
        pause(0.01);
        %
        fisOptions = genfisOptions('SubtractiveClustering');
        fisOptions.ClusterInfluenceRange = str2double(PARAMS{1});
        fisOptions.DataScale = PARAMS{2};
        fisOptions.SquashFactor = str2double(PARAMS{3});
        fisOptions.AspectRatio = str2double(PARAMS{4});
        fisOptions.RejectRatio = str2double(PARAMS{5});        
        fisOptions.Verbose = 1; % show the progress information
        %
        fis = genfis(TrainInput, TrainTarget, fisOptions);      
    case Option{3}
        Prompt={'FIS Type', 'Number fo Clusters (c):',...
                'Partition Matrix Exponent (q):',...
                'Maximum Number of Iterations:',...
                'Minimum Improvemnet:'};
        Title='Enter genfis3 parameters';
        DefaultValues={'sugeno', '8', '2', '100', '1e-5'};
        PARAMS=inputdlg(Prom
pt,Title,1,DefaultValues);
        pause(0.01);
        %
        fisOptions = genfisOptions('FCMClustering');
        fisOptions.FISType = PARAMS{1};
        fisOptions.NumClusters = str2double(PARAMS{2});
        fisOptions.Exponent = str2double(PARAMS{3});
        fisOptions.MaxNumIteration = str2double(PARAMS{4});
        fisOptions.MinImprovement = str2double(PARAMS{5});
        fisOptions.Verbose = 1;
        %
        fis = genfis(TrainInput, TrainTarget, fisOptions);
end
%%
%% TRAIN AND VALIDATE FIS
Prompt={'Maximum Number of Epochs:',...
        'Error Goal:',...
        'Initial Step Size:',...
        'Step Size Decrease Rate:',...
        'Step Size Increase Rate:'};
Title='Enter genfis3 parameters';
DefaultValues={'100', '0', '0.01', '0.9', '1.1'};
%
PARAMS=inputdlg(Prompt,Title,1,DefaultValues);
pause(0.01);
%
options = anfisOptions;
options.InitialFIS = fis;
options.EpochNumber = str2double(PARAMS{1});
options.ErrorGoal = str2double(PARAMS{2});  
options.InitialStepSize = str2double(PARAMS{3});
options.StepSizeDecreaseRate = str2double(PARAMS{4});
options.StepSizeIncreaseRate = str2double(PARAMS{5});
%
options.DisplayANFISInformation = 1;
options.DisplayErrorValues = 1;
options.DisplayStepSize = 1;
options.DisplayFinalResults = 1;
% The validation data is the testing data
options.ValidationData = [TestInput TestTarget];
options.OptimizationMethod = 1;
% 0: Backpropagation
% 1: Hybrid   
% Train the FIS with the training data
[myAnfis, trainError,stepSize,chkFIS,chkError] = anfis(TrainData, options);  %#ok
%%
%% TEST FIS
% evalute the training and testing datasets to check the accuracy of the
% model
TrainOutput = evalfis(myAnfis, TrainInput);
TestOutput = evalfis(myAnfis, TestInput);
%  Test FIS using the checking data. This gives the output of the system
Output = evalfis(myAnfis, CheckInput);
%%
%% CALCULATE ERRORS
TrainingRMSE = min(trainError); %#ok
TestingRMSE = min(chkError); %#ok
%%
%% Plot Results
figure('Name','Train Output', 'NumberTitle','off');
plot(TrainTarget, 'b*');
hold on;
plot(TrainOutput, 'r+');
hold off
legend('Training Output','ANFIS Output','Location','NorthWest')